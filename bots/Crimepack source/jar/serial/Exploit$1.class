import java.io.ObjectInputStream;
import java.util.Set;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceAlreadyExistsException;
import javax.management.InstanceNotFoundException;
import javax.management.IntrospectionException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanRegistrationException;
import javax.management.MBeanServer;
import javax.management.NotCompliantMBeanException;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.OperationsException;
import javax.management.QueryExp;
import javax.management.ReflectionException;
import javax.management.loading.ClassLoaderRepository;

class Exploit$1
  implements MBeanServer
{
  Exploit$1(Exploit paramExploit)
  {
  }

  public void unregisterMBean(ObjectName name)
    throws InstanceNotFoundException, MBeanRegistrationException
  {
  }

  public AttributeList setAttributes(ObjectName name, AttributeList attributes)
    throws InstanceNotFoundException, ReflectionException
  {
    return null;
  }

  public void setAttribute(ObjectName name, Attribute attribute)
    throws InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException
  {
  }

  public void removeNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException, ListenerNotFoundException
  {
  }

  public void removeNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException, ListenerNotFoundException
  {
  }

  public void removeNotificationListener(ObjectName name, NotificationListener listener)
    throws InstanceNotFoundException, ListenerNotFoundException
  {
  }

  public void removeNotificationListener(ObjectName name, ObjectName listener)
    throws InstanceNotFoundException, ListenerNotFoundException
  {
  }

  public ObjectInstance registerMBean(Object object, ObjectName name)
    throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException
  {
    return null;
  }

  public Set<ObjectName> queryNames(ObjectName name, QueryExp query)
  {
    return null;
  }

  public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query)
  {
    return null;
  }

  public boolean isRegistered(ObjectName name)
  {
    return false;
  }

  public boolean isInstanceOf(ObjectName name, String className)
    throws InstanceNotFoundException
  {
    return false;
  }

  public Object invoke(ObjectName name, String operationName, Object[] params, String[] signature)
    throws InstanceNotFoundException, MBeanException, ReflectionException
  {
    return null;
  }

  public Object instantiate(String className, ObjectName loaderName, Object[] params, String[] signature)
    throws ReflectionException, MBeanException, InstanceNotFoundException
  {
    return null;
  }

  public Object instantiate(String className, Object[] params, String[] signature)
    throws ReflectionException, MBeanException
  {
    return null;
  }

  public Object instantiate(String className, ObjectName loaderName)
    throws ReflectionException, MBeanException, InstanceNotFoundException
  {
    return null;
  }

  public Object instantiate(String className)
    throws ReflectionException, MBeanException
  {
    return null;
  }

  public ObjectInstance getObjectInstance(ObjectName name)
    throws InstanceNotFoundException
  {
    return null;
  }

  public MBeanInfo getMBeanInfo(ObjectName name)
    throws InstanceNotFoundException, IntrospectionException, ReflectionException
  {
    return null;
  }

  public Integer getMBeanCount()
  {
    return null;
  }

  public String[] getDomains()
  {
    return null;
  }

  public String getDefaultDomain()
  {
    return null;
  }

  public ClassLoaderRepository getClassLoaderRepository()
  {
    return new ClassLoaderRepository()
    {
      public Class<?> loadClassWithout(ClassLoader exclude, String className)
        throws ClassNotFoundException
      {
        return null;
      }

      public Class<?> loadClassBefore(ClassLoader stop, String className)
        throws ClassNotFoundException
      {
        return null;
      }

      public Class<?> loadClass(String className)
        throws ClassNotFoundException
      {
        return null;
      }
    };
  }

  public ClassLoader getClassLoaderFor(ObjectName mbeanName)
    throws InstanceNotFoundException
  {
    return null;
  }

  public ClassLoader getClassLoader(ObjectName loaderName)
    throws InstanceNotFoundException
  {
    return null;
  }

  public AttributeList getAttributes(ObjectName name, String[] attributes)
    throws InstanceNotFoundException, ReflectionException
  {
    return null;
  }

  public Object getAttribute(ObjectName name, String attribute)
    throws MBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException
  {
    return null;
  }

  public ObjectInputStream deserialize(String className, ObjectName loaderName, byte[] data)
    throws InstanceNotFoundException, OperationsException, ReflectionException
  {
    return null;
  }

  public ObjectInputStream deserialize(String className, byte[] data)
    throws OperationsException, ReflectionException
  {
    return null;
  }

  public ObjectInputStream deserialize(ObjectName name, byte[] data)
    throws InstanceNotFoundException, OperationsException
  {
    return null;
  }

  public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName, Object[] params, String[] signature)
    throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException
  {
    return null;
  }

  public ObjectInstance createMBean(String className, ObjectName name, Object[] params, String[] signature)
    throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException
  {
    return null;
  }

  public ObjectInstance createMBean(String className, ObjectName name, ObjectName loaderName)
    throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException, InstanceNotFoundException
  {
    return null;
  }

  public ObjectInstance createMBean(String className, ObjectName name)
    throws ReflectionException, InstanceAlreadyExistsException, MBeanRegistrationException, MBeanException, NotCompliantMBeanException
  {
    return null;
  }

  public void addNotificationListener(ObjectName name, ObjectName listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException
  {
  }

  public void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException
  {
  }
}
